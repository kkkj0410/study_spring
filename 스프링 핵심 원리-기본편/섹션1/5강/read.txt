1. 단일 책임 원칙(SRP)
    - 하나의 클래스는 하나의 책임만 가져야 한다
        
        (상황에 맞게, 하나의 클래스에 적당한 책임을 채워 넣어라)
        
2. 개방-폐쇄 원칙(OCP)
    - 확장에는 열려 있으나, 변경에는 닫혀 있어야 한다.
        
        (인터페이스는 그대로 두고, 자식 객체는 여러개로 계속 확장)
        
3. 리스코프 치환 원칙(LSP)
    - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야한다.
    
     [※](https://xn--yq5bk9r.com/blog/emoji-billiard)인스턴스 : 실제 사용되고 있는 객체
    
    ⇒ 인터페이스에서 의도한 규칙과 반대되게 객체를 구현하지 말라는 것.
    
4. 인터페이스 분리 원칙(ISP)
    - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
    
    ⇒ 역할에 맞게끔 인터페이스를 여러개로 쪼개라.
    
5. 의존관계 역전 원칙(DIP)
    - 자식 클래스는 상속받은 인터페이스에 대해서만 의존해야한다.(다른 인터페이스나, 다른 객체에 대한 정보 필요X)
    

1~5 ⇒ 즉, 자신의 역할에 맞게끔 객체를 생성하라.
